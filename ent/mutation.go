// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/testentity"
	"entdemo/ent/testentityhistory"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flume/enthistory"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTestEntity        = "TestEntity"
	TypeTestEntityHistory = "TestEntityHistory"
)

// TestEntityMutation represents an operation that mutates the TestEntity nodes in the graph.
type TestEntityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	status        *testentity.Status
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TestEntity, error)
	predicates    []predicate.TestEntity
}

var _ ent.Mutation = (*TestEntityMutation)(nil)

// testentityOption allows management of the mutation configuration using functional options.
type testentityOption func(*TestEntityMutation)

// newTestEntityMutation creates new mutation for the TestEntity entity.
func newTestEntityMutation(c config, op Op, opts ...testentityOption) *TestEntityMutation {
	m := &TestEntityMutation{
		config:        c,
		op:            op,
		typ:           TypeTestEntity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestEntityID sets the ID field of the mutation.
func withTestEntityID(id int) testentityOption {
	return func(m *TestEntityMutation) {
		var (
			err   error
			once  sync.Once
			value *TestEntity
		)
		m.oldValue = func(ctx context.Context) (*TestEntity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestEntity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestEntity sets the old TestEntity of the mutation.
func withTestEntity(node *TestEntity) testentityOption {
	return func(m *TestEntityMutation) {
		m.oldValue = func(context.Context) (*TestEntity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestEntityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestEntityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestEntityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestEntityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestEntity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *TestEntityMutation) SetStatus(t testentity.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TestEntityMutation) Status() (r testentity.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TestEntity entity.
// If the TestEntity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestEntityMutation) OldStatus(ctx context.Context) (v testentity.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TestEntityMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the TestEntityMutation builder.
func (m *TestEntityMutation) Where(ps ...predicate.TestEntity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestEntityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestEntityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestEntity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestEntityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestEntityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestEntity).
func (m *TestEntityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestEntityMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.status != nil {
		fields = append(fields, testentity.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestEntityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testentity.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestEntityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testentity.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown TestEntity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestEntityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testentity.FieldStatus:
		v, ok := value.(testentity.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown TestEntity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestEntityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestEntityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestEntityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TestEntity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestEntityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestEntityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestEntityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TestEntity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestEntityMutation) ResetField(name string) error {
	switch name {
	case testentity.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown TestEntity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestEntityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestEntityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestEntityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestEntityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestEntityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestEntityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestEntityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TestEntity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestEntityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TestEntity edge %s", name)
}

// TestEntityHistoryMutation represents an operation that mutates the TestEntityHistory nodes in the graph.
type TestEntityHistoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	history_time  *time.Time
	operation     *enthistory.OpType
	ref           *int
	addref        *int
	updated_by    *int
	addupdated_by *int
	status        *testentityhistory.Status
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TestEntityHistory, error)
	predicates    []predicate.TestEntityHistory
}

var _ ent.Mutation = (*TestEntityHistoryMutation)(nil)

// testentityhistoryOption allows management of the mutation configuration using functional options.
type testentityhistoryOption func(*TestEntityHistoryMutation)

// newTestEntityHistoryMutation creates new mutation for the TestEntityHistory entity.
func newTestEntityHistoryMutation(c config, op Op, opts ...testentityhistoryOption) *TestEntityHistoryMutation {
	m := &TestEntityHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeTestEntityHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestEntityHistoryID sets the ID field of the mutation.
func withTestEntityHistoryID(id int) testentityhistoryOption {
	return func(m *TestEntityHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *TestEntityHistory
		)
		m.oldValue = func(ctx context.Context) (*TestEntityHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestEntityHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestEntityHistory sets the old TestEntityHistory of the mutation.
func withTestEntityHistory(node *TestEntityHistory) testentityhistoryOption {
	return func(m *TestEntityHistoryMutation) {
		m.oldValue = func(context.Context) (*TestEntityHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestEntityHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestEntityHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestEntityHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestEntityHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestEntityHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHistoryTime sets the "history_time" field.
func (m *TestEntityHistoryMutation) SetHistoryTime(t time.Time) {
	m.history_time = &t
}

// HistoryTime returns the value of the "history_time" field in the mutation.
func (m *TestEntityHistoryMutation) HistoryTime() (r time.Time, exists bool) {
	v := m.history_time
	if v == nil {
		return
	}
	return *v, true
}

// OldHistoryTime returns the old "history_time" field's value of the TestEntityHistory entity.
// If the TestEntityHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestEntityHistoryMutation) OldHistoryTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHistoryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHistoryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHistoryTime: %w", err)
	}
	return oldValue.HistoryTime, nil
}

// ResetHistoryTime resets all changes to the "history_time" field.
func (m *TestEntityHistoryMutation) ResetHistoryTime() {
	m.history_time = nil
}

// SetOperation sets the "operation" field.
func (m *TestEntityHistoryMutation) SetOperation(et enthistory.OpType) {
	m.operation = &et
}

// Operation returns the value of the "operation" field in the mutation.
func (m *TestEntityHistoryMutation) Operation() (r enthistory.OpType, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the TestEntityHistory entity.
// If the TestEntityHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestEntityHistoryMutation) OldOperation(ctx context.Context) (v enthistory.OpType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ResetOperation resets all changes to the "operation" field.
func (m *TestEntityHistoryMutation) ResetOperation() {
	m.operation = nil
}

// SetRef sets the "ref" field.
func (m *TestEntityHistoryMutation) SetRef(i int) {
	m.ref = &i
	m.addref = nil
}

// Ref returns the value of the "ref" field in the mutation.
func (m *TestEntityHistoryMutation) Ref() (r int, exists bool) {
	v := m.ref
	if v == nil {
		return
	}
	return *v, true
}

// OldRef returns the old "ref" field's value of the TestEntityHistory entity.
// If the TestEntityHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestEntityHistoryMutation) OldRef(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRef: %w", err)
	}
	return oldValue.Ref, nil
}

// AddRef adds i to the "ref" field.
func (m *TestEntityHistoryMutation) AddRef(i int) {
	if m.addref != nil {
		*m.addref += i
	} else {
		m.addref = &i
	}
}

// AddedRef returns the value that was added to the "ref" field in this mutation.
func (m *TestEntityHistoryMutation) AddedRef() (r int, exists bool) {
	v := m.addref
	if v == nil {
		return
	}
	return *v, true
}

// ClearRef clears the value of the "ref" field.
func (m *TestEntityHistoryMutation) ClearRef() {
	m.ref = nil
	m.addref = nil
	m.clearedFields[testentityhistory.FieldRef] = struct{}{}
}

// RefCleared returns if the "ref" field was cleared in this mutation.
func (m *TestEntityHistoryMutation) RefCleared() bool {
	_, ok := m.clearedFields[testentityhistory.FieldRef]
	return ok
}

// ResetRef resets all changes to the "ref" field.
func (m *TestEntityHistoryMutation) ResetRef() {
	m.ref = nil
	m.addref = nil
	delete(m.clearedFields, testentityhistory.FieldRef)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TestEntityHistoryMutation) SetUpdatedBy(i int) {
	m.updated_by = &i
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TestEntityHistoryMutation) UpdatedBy() (r int, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the TestEntityHistory entity.
// If the TestEntityHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestEntityHistoryMutation) OldUpdatedBy(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds i to the "updated_by" field.
func (m *TestEntityHistoryMutation) AddUpdatedBy(i int) {
	if m.addupdated_by != nil {
		*m.addupdated_by += i
	} else {
		m.addupdated_by = &i
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *TestEntityHistoryMutation) AddedUpdatedBy() (r int, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TestEntityHistoryMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[testentityhistory.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TestEntityHistoryMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[testentityhistory.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TestEntityHistoryMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, testentityhistory.FieldUpdatedBy)
}

// SetStatus sets the "status" field.
func (m *TestEntityHistoryMutation) SetStatus(t testentityhistory.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TestEntityHistoryMutation) Status() (r testentityhistory.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TestEntityHistory entity.
// If the TestEntityHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestEntityHistoryMutation) OldStatus(ctx context.Context) (v testentityhistory.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TestEntityHistoryMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the TestEntityHistoryMutation builder.
func (m *TestEntityHistoryMutation) Where(ps ...predicate.TestEntityHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestEntityHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestEntityHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestEntityHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestEntityHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestEntityHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestEntityHistory).
func (m *TestEntityHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestEntityHistoryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.history_time != nil {
		fields = append(fields, testentityhistory.FieldHistoryTime)
	}
	if m.operation != nil {
		fields = append(fields, testentityhistory.FieldOperation)
	}
	if m.ref != nil {
		fields = append(fields, testentityhistory.FieldRef)
	}
	if m.updated_by != nil {
		fields = append(fields, testentityhistory.FieldUpdatedBy)
	}
	if m.status != nil {
		fields = append(fields, testentityhistory.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestEntityHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testentityhistory.FieldHistoryTime:
		return m.HistoryTime()
	case testentityhistory.FieldOperation:
		return m.Operation()
	case testentityhistory.FieldRef:
		return m.Ref()
	case testentityhistory.FieldUpdatedBy:
		return m.UpdatedBy()
	case testentityhistory.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestEntityHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testentityhistory.FieldHistoryTime:
		return m.OldHistoryTime(ctx)
	case testentityhistory.FieldOperation:
		return m.OldOperation(ctx)
	case testentityhistory.FieldRef:
		return m.OldRef(ctx)
	case testentityhistory.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case testentityhistory.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown TestEntityHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestEntityHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testentityhistory.FieldHistoryTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHistoryTime(v)
		return nil
	case testentityhistory.FieldOperation:
		v, ok := value.(enthistory.OpType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case testentityhistory.FieldRef:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRef(v)
		return nil
	case testentityhistory.FieldUpdatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case testentityhistory.FieldStatus:
		v, ok := value.(testentityhistory.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown TestEntityHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestEntityHistoryMutation) AddedFields() []string {
	var fields []string
	if m.addref != nil {
		fields = append(fields, testentityhistory.FieldRef)
	}
	if m.addupdated_by != nil {
		fields = append(fields, testentityhistory.FieldUpdatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestEntityHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testentityhistory.FieldRef:
		return m.AddedRef()
	case testentityhistory.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestEntityHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testentityhistory.FieldRef:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRef(v)
		return nil
	case testentityhistory.FieldUpdatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown TestEntityHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestEntityHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testentityhistory.FieldRef) {
		fields = append(fields, testentityhistory.FieldRef)
	}
	if m.FieldCleared(testentityhistory.FieldUpdatedBy) {
		fields = append(fields, testentityhistory.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestEntityHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestEntityHistoryMutation) ClearField(name string) error {
	switch name {
	case testentityhistory.FieldRef:
		m.ClearRef()
		return nil
	case testentityhistory.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown TestEntityHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestEntityHistoryMutation) ResetField(name string) error {
	switch name {
	case testentityhistory.FieldHistoryTime:
		m.ResetHistoryTime()
		return nil
	case testentityhistory.FieldOperation:
		m.ResetOperation()
		return nil
	case testentityhistory.FieldRef:
		m.ResetRef()
		return nil
	case testentityhistory.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case testentityhistory.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown TestEntityHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestEntityHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestEntityHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestEntityHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestEntityHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestEntityHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestEntityHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestEntityHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TestEntityHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestEntityHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TestEntityHistory edge %s", name)
}
