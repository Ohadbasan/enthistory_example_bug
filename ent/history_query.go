// Code generated by enthistory, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"entdemo/ent/testentityhistory"

	"entgo.io/ent/dialect/sql"
)

func (te *TestEntity) History() *TestEntityHistoryQuery {
	historyClient := NewTestEntityHistoryClient(te.config)
	return historyClient.Query().Where(testentityhistory.Ref(te.ID))
}

func (teh *TestEntityHistory) Next(ctx context.Context) (*TestEntityHistory, error) {
	client := NewTestEntityHistoryClient(teh.config)
	return client.Query().
		Where(
			testentityhistory.Ref(teh.Ref),
			testentityhistory.HistoryTimeGT(teh.HistoryTime),
		).
		Order(testentityhistory.ByHistoryTime()).
		First(ctx)
}

func (teh *TestEntityHistory) Prev(ctx context.Context) (*TestEntityHistory, error) {
	client := NewTestEntityHistoryClient(teh.config)
	return client.Query().
		Where(
			testentityhistory.Ref(teh.Ref),
			testentityhistory.HistoryTimeLT(teh.HistoryTime),
		).
		Order(testentityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tehq *TestEntityHistoryQuery) Earliest(ctx context.Context) (*TestEntityHistory, error) {
	return tehq.
		Order(testentityhistory.ByHistoryTime()).
		First(ctx)
}

func (tehq *TestEntityHistoryQuery) Latest(ctx context.Context) (*TestEntityHistory, error) {
	return tehq.
		Order(testentityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tehq *TestEntityHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TestEntityHistory, error) {
	return tehq.
		Where(testentityhistory.HistoryTimeLTE(time)).
		Order(testentityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (teh *TestEntityHistory) Restore(ctx context.Context) (*TestEntity, error) {
	client := NewTestEntityClient(teh.config)
	return client.
		UpdateOneID(teh.Ref).
		SetStatus(teh.Status).
		Save(ctx)
}
