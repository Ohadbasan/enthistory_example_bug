// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/testentityhistory"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestEntityHistoryUpdate is the builder for updating TestEntityHistory entities.
type TestEntityHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *TestEntityHistoryMutation
}

// Where appends a list predicates to the TestEntityHistoryUpdate builder.
func (tehu *TestEntityHistoryUpdate) Where(ps ...predicate.TestEntityHistory) *TestEntityHistoryUpdate {
	tehu.mutation.Where(ps...)
	return tehu
}

// Mutation returns the TestEntityHistoryMutation object of the builder.
func (tehu *TestEntityHistoryUpdate) Mutation() *TestEntityHistoryMutation {
	return tehu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tehu *TestEntityHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tehu.sqlSave, tehu.mutation, tehu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tehu *TestEntityHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tehu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tehu *TestEntityHistoryUpdate) Exec(ctx context.Context) error {
	_, err := tehu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tehu *TestEntityHistoryUpdate) ExecX(ctx context.Context) {
	if err := tehu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tehu *TestEntityHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testentityhistory.Table, testentityhistory.Columns, sqlgraph.NewFieldSpec(testentityhistory.FieldID, field.TypeInt))
	if ps := tehu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tehu.mutation.RefCleared() {
		_spec.ClearField(testentityhistory.FieldRef, field.TypeInt)
	}
	if tehu.mutation.UpdatedByCleared() {
		_spec.ClearField(testentityhistory.FieldUpdatedBy, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tehu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testentityhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tehu.mutation.done = true
	return n, nil
}

// TestEntityHistoryUpdateOne is the builder for updating a single TestEntityHistory entity.
type TestEntityHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestEntityHistoryMutation
}

// Mutation returns the TestEntityHistoryMutation object of the builder.
func (tehuo *TestEntityHistoryUpdateOne) Mutation() *TestEntityHistoryMutation {
	return tehuo.mutation
}

// Where appends a list predicates to the TestEntityHistoryUpdate builder.
func (tehuo *TestEntityHistoryUpdateOne) Where(ps ...predicate.TestEntityHistory) *TestEntityHistoryUpdateOne {
	tehuo.mutation.Where(ps...)
	return tehuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tehuo *TestEntityHistoryUpdateOne) Select(field string, fields ...string) *TestEntityHistoryUpdateOne {
	tehuo.fields = append([]string{field}, fields...)
	return tehuo
}

// Save executes the query and returns the updated TestEntityHistory entity.
func (tehuo *TestEntityHistoryUpdateOne) Save(ctx context.Context) (*TestEntityHistory, error) {
	return withHooks(ctx, tehuo.sqlSave, tehuo.mutation, tehuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tehuo *TestEntityHistoryUpdateOne) SaveX(ctx context.Context) *TestEntityHistory {
	node, err := tehuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tehuo *TestEntityHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tehuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tehuo *TestEntityHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := tehuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tehuo *TestEntityHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TestEntityHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(testentityhistory.Table, testentityhistory.Columns, sqlgraph.NewFieldSpec(testentityhistory.FieldID, field.TypeInt))
	id, ok := tehuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestEntityHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tehuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testentityhistory.FieldID)
		for _, f := range fields {
			if !testentityhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testentityhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tehuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tehuo.mutation.RefCleared() {
		_spec.ClearField(testentityhistory.FieldRef, field.TypeInt)
	}
	if tehuo.mutation.UpdatedByCleared() {
		_spec.ClearField(testentityhistory.FieldUpdatedBy, field.TypeInt)
	}
	_node = &TestEntityHistory{config: tehuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tehuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testentityhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tehuo.mutation.done = true
	return _node, nil
}
